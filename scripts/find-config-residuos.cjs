#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const ROOT = process.cwd();
const configResidues = [
  'package-lock.json',
  'yarn.lock',
  'npm-shrinkwrap.json',
  'yarn-error.log',
  'lerna.json',
  'lerna-debug.log',
  'pnpm-lock.yaml',
  'pnpm-workspace.yaml',
  'yarnrc.yml',
  '.yarnrc',
  '.yarnrc.yml',
  '.npmrc',
  '.nvmrc',
  '.node-version',
  '.env',
  '.env.local',
  '.env.development.local',
  '.env.test.local',
  '.env.production.local',
  '.DS_Store',
  'Thumbs.db',
  '.idea',
  '.vscode',
  '.pnp.js',
  '.pnp',
  '.cache',
  '.tmp',
  'dist',
  'build',
  'coverage',
  '.turbo',
  '.next',
  '.parcel-cache',
  '.eslintcache',
  '.tsbuildinfo',
  '.swc',
  '.babelrc',
  '.babelrc.js',
  '.babelrc.json',
  'babel.config.js',
  'babel.config.json',
  'tsconfig.tsbuildinfo',
  'tsconfig.build.json',
  'tsconfig.prod.json',
  'tsconfig.test.json',
  'tsconfig.eslint.json',
  'tsconfig.server.json',
  'tsconfig.client.json',
  'tsconfig.base.json',
  'tsconfig.json',
  'tsconfig.app.json',
  'tsconfig.node.json',
  'vite.config.js',
  'vite.config.ts',
  'jest.config.js',
  'jest.config.ts',
  'jest.setup.js',
  'jest.setup.ts',
  'webpack.config.js',
  'webpack.config.ts',
  'webpack.config.babel.js',
  'webpack.config.base.js',
  'webpack.config.prod.js',
  'webpack.config.dev.js',
  'webpack.config.test.js',
  'rollup.config.js',
  'rollup.config.ts',
  'rollup.config.mjs',
  'rollup.config.cjs',
  'gulpfile.js',
  'gulpfile.ts',
  'Gruntfile.js',
  'Gruntfile.ts',
  '.editorconfig',
  '.prettierrc',
  '.prettierrc.js',
  '.prettierrc.json',
  '.prettierrc.yaml',
  '.prettierrc.yml',
  '.prettierignore',
  '.stylelintrc',
  '.stylelintrc.js',
  '.stylelintrc.json',
  '.stylelintrc.yaml',
  '.stylelintrc.yml',
  '.stylelintignore',
  '.commitlintrc',
  '.commitlintrc.js',
  '.commitlintrc.json',
  '.commitlintrc.yaml',
  '.commitlintrc.yml',
  '.czrc',
  '.cz.json',
  '.cz.yaml',
  '.cz.yml',
  '.cz.js',
  '.czrc.js',
  '.czrc.json',
  '.czrc.yaml',
  '.czrc.yml',
  '.huskyrc',
  '.huskyrc.js',
  '.huskyrc.json',
  '.huskyrc.yaml',
  '.huskyrc.yml',
  '.lintstagedrc',
  '.lintstagedrc.js',
  '.lintstagedrc.json',
  '.lintstagedrc.yaml',
  '.lintstagedrc.yml',
  '.lintstagedrc.mjs',
  '.lintstagedrc.cjs',
  '.lintstagedrc.ts',
  '.lintstagedrc.config.js',
  '.lintstagedrc.config.cjs',
  '.lintstagedrc.config.mjs',
  '.lintstagedrc.config.ts',
  '.ncurc',
  '.ncurc.js',
  '.ncurc.json',
  '.ncurc.yaml',
  '.ncurc.yml',
  '.ncurc.ts',
  '.ncurc.mjs',
  '.ncurc.cjs',
  '.ncurc.config.js',
  '.ncurc.config.cjs',
  '.ncurc.config.mjs',
  '.ncurc.config.ts',
];

function findResidues(dir, found = []) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    if (entry.isDirectory() && !['node_modules', '.git', 'dist', 'build', '.turbo', '.next', '.cache', '.tmp', 'coverage'].includes(entry.name)) {
      findResidues(fullPath, found);
    } else if (configResidues.includes(entry.name)) {
      found.push(fullPath);
    }
  }
  return found;
}

const residues = findResidues(ROOT);

if (residues.length === 0) {
  console.log('Nenhum resíduo de configuração/lockfile antigo encontrado.');
} else {
  console.log('Possíveis resíduos de configuração/lockfiles antigos encontrados:');
  residues.forEach(f => console.log(' -', f));
} 